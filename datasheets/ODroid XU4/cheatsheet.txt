------ setup odroid ------
# Ubuntu images are stored in http://odroid.com/dokuwiki/doku.php?id=en:xu3_release_linux_ubuntu
# Ubuntu 16.04 is http://odroid.in/ubuntu_16.04lts/
# download WinDiskImager from http://com.odroid.com/sigong/blog/blog_list.php?bid=144
# write Ubuntu Image to SD card 
# plug in ethernet cable
# switch on, log in via odroid/odroid
# fetch odroid-utility
>su
>wget -O /usr/local/bin/odroid-utility.sh https://raw.githubusercontent.com/mdrjr/odroid-utility/master/odroid-utility.sh
>chmod +x /usr/local/bin/odroid-utility.sh
>/usr/local/bin/odroid-utility.sh
# enhance partition, and update firmware/kernel
# update everything 
>apt-get update
>apt-get upgrade


------- create sudo-enabled user walter ----
>adduser walter
>addgroup walter sudo 


### CPU frequency ###
>sudo apt-get install cpufrequtils
>cpufreq-set -r -g ondemand
>cpufreq-info
>echo $((`cpufreq-info -f` /1000))'Mhz' $((`cat /sys/devices/virtual/thermal/thermal_zone0/temp` /1000))'Â°'
>cpufreq-info -c 0 -f -m;cpufreq-info -c 1 -f -m;cpufreq-info -c 2 -f -m;cpufreq-info -c 3 -f -m; cpufreq-info -c 4 -f -m;cpufreq-info -c 5 -f -m;cpufreq-info -c 6 -f -m;cpufreq-info -c 7 -f -m;

###  hardware lister  management ###
# install lshw
>apt-get install lshw
# see all used kernel modules
>lsmod
# inspect the driver of network
>sudo lshw -C network 2>&1 | grep wireless | grep driver
# look for "driver", something like rtl8182cu comes up
# check lsmod and look for corresponding kernel module
# restart wifi dongle
>sudo modprobe -r 8192cu && sudo modprobe 8192cu

### install script to re-intialize wlan stick if not up after boot

# make etc/rc.local be run after boot
>sudo systemctl edit --full rc-local


## restart Wifi dongle when stuck after boot
#find out kernel module
---- sudo without password -----
>su
>vi /etc/sudoers
# add to last line
# odroid ALL=(ALL) NOPASSWD: ALL
# walter ALL=(ALL) NOPASSWD: ALL


---- Install Wifi by (http://linux.icydog.net/wpa.php) ---
# show all usb devices, one wlan0 device should appear 
>lsusb
# show system messages, when plugging in the wlan adapter
>dmesg | tail
# scan Wlan 
>sudo iwlist wlan0 scan
# wlan setup
# disable network online wait
>systemctl disable NetworkManager-wait-online.service
# set network timeout during boot
>vi /etc/dhcp/dhclient.conf
#Set timeout 15;

# add WIFI to /etc/network/interface
>sudo vi /etc/network/interface
auto wlan0
allow-hotplug wlan0
# configuration via static ip address
#iface wlan0 inet static
#wpa-ap-scan 1
#wpa-scan-ssid 1
#wpa-ssid "lorem ipsum dolor sit amet"
#wpa-psk "7386801780590940"
#address 192.168.1.66
#netmask 255.255.255.0
#gateway 192.168.178.1

# configuration via dhcp
iface wlan0 inet dhcp
wpa-ap-scan 1
wpa-scan-ssid 1
wpa-ssid "lorem ipsum dolor sit amet"
wpa-psk "7386801780590940"

#restart network manager
>service network-manager restart

------------ sshd --------------------------
# https://www.digitalocean.com/community/tutorials/how-to-use-ssh-to-connect-to-a-remote-server-in-ubuntu
# https://winscp.net/eng/docs/message_unexpected_close
# checking sshd authentication log in /var/log/auth.log 
# setting ssh configuration in /etc/ssh/sshd_config, set logging from LogLevel INFO to LogLevel VERBOSE 
LoginGraceTime 120
PermitRootLogin yes
StrictModes yes
PasswordAuthentication yes
if log is empty, restart rsyslog
# default keys are not there in fresh installation, run
>sudo /usr/bin/ssh-keygen -A
# to generate /etc/ssh/*key
>service rsyslog restart
# log ssh errors by 
>sudo service ssh status -l
# now putty should work
# enable eclipse too access via ssh by adding 
KexAlgorithms diffie-hellman-group1-sha1,diffie-hellman-group-exchange-sha1
#to /etc/ssh/sshd_config

------------------- setup eclipse with cross compiling ------------------------------------------
#install linaro tool chain from https://releases.linaro.org/components/toolchain/binaries/latest/arm-linux-gnueabihf/

# enable ssh/sftp connection from eclipse to odroid
# into in D:\Programme\gcc-linaro-arm-linux-gnueabihf-4.8-2013.09_win32
# open remote with  Window/Show View/Other/Remote Systems/Remote Systems. If not there, install it with Help/"install new software"
# invoke button "define a connection to remote system", use "ssh only", IP 192.168.178.58
# double click sftp, key in credentials walter/walter

# install plugin "Direct Remote C++ Debugging" via help/Marketplace
# install plugin "GNU ARM Eclipse" from Eclipse Marketplace

------------------ Serial Interfaces -----------------
# plugin Serial Interfaces, make devices writeable when they are plugged in
# create a new file:
>sudo vi /etc/udev/rules.d/ttyusb.rules  
# create one line
KERNEL=="ttyUSB[0-9]*",MODE="0777"
